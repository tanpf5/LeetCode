import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;



public class Solution {
	// min depth
    public int minDepth(TreeNode root) {
    	if (root == null) return 0;
        if ((root.left == null) && (root.right == null)) return 1;
        else {
        	if (root.left == null) 
        		return minDepth(root.right) + 1;
        	else {
        		if (root.right == null)
        			return minDepth(root.left) + 1;
        		else return Math.min(minDepth(root.left), minDepth(root.right)) + 1;
        	}
        }    	
    }
	
    // max depth
    public int maxDepth(TreeNode root) {
        if (root == null) return 0;
        else return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;
    }
    
    // is same tree
    public boolean isSameTree(TreeNode p, TreeNode q) {
    	if (p == null && q == null) return true;
    	if (p == null || q == null) return false;
        return (isSameTree(p.left, q.left) && isSameTree(p.right, q.right) && (p.val == q.val));
        
    }
    
    
    // is symmetric 
    public boolean isSymmetric(TreeNode left, TreeNode right) {
    	if (left == null && right == null) return true;
    	if (left == null || right == null) return false;
    	return (isSymmetric(left.left, right.right) && isSymmetric(left.right, right.left)
    			&& left.val == right.val);
    }
    
    public boolean isSymmetric(TreeNode root) {
        if (root == null) return true;
        return isSymmetric(root.left, root.right);
    }
    
    // level order
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if (root == null) return result;
        Queue q = new LinkedList();
        TreeNode temp, magic = new TreeNode(0);
        q.add(root);
        q.add(magic);
        List<Integer> level = new ArrayList<Integer>();
        while (!q.isEmpty()) {
        	temp = (TreeNode) q.poll();
        	if (temp.equals(magic)) {
        		result.add(level);
        		level.removeAll(level);
        	} else {
        		level.add(temp.val);
        		
        	}
        }
        
    }
    
	public static void main(String[] args) {

	}

}
